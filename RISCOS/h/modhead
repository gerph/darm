/* Generated by CMunge 0.78 (17 Dec 2021)
 * CMunge Copyright (c) 1999-2006 Robin Watts/Justin Fletcher */

#ifndef _CMUNGE_Debugger_H_
#define _CMUNGE_Debugger_H_

#include "kernel.h"

#define CMUNGE_VERSION (78)
#define CMHG_VERSION   (531) /* Nearest equivalent version */

#define Module_Title		"Debugger"
#define Module_Help		"Debugger"
#define Module_VersionString	"0.01"
#define Module_VersionNumber	1
#ifndef Module_Date
#define Module_Date		"16 Jun 2024"
#endif

#ifdef __cplusplus
extern "C" {
#endif


/***************************************************************************
 * Function:     Mod_Init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *Mod_Init(const char *tail, int podule_base, void *pw);


/***************************************************************************
 * Function:     Mod_Final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *Mod_Final(int fatal, int podule_base, void *pw);


/***************************************************************************
 * Description:  SWI handler routine. All SWIs for this module will be
 *               passed to these routines.
 * Parameters:   number = SWI number within SWI chunk (i.e. 0 to 63)
 *               r      = pointer to register block on entry
 *               pw     = private word for module
 * On exit:      Return NULL if SWI handled sucessfully, setting return
 *               register values (r0-r9) in r.
 *               Return error_BAD_SWI for out of range SWIs.
 *               Return an error block for a custom error.
 **************************************************************************/
/* Functions called to handle particular SWI calls */
_kernel_oserror *SWI_Disassemble(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_DisassembleThumb(int number, _kernel_swi_regs *r,
                                      void *pw);
/* SWI number definitions */
#define Debugger_00 (0x00040380)
#undef Debugger_Disassemble
#undef XDebugger_Disassemble
#define Debugger_Disassemble      (0x00040380)
#define XDebugger_Disassemble     (0x00060380)
#undef Debugger_DisassembleThumb
#undef XDebugger_DisassembleThumb
#define Debugger_DisassembleThumb  (0x00040381)
#define XDebugger_DisassembleThumb (0x00060381)

/* Special error for 'SWI values out of range for this module' */
#define error_BAD_SWI ((_kernel_oserror *) -1)

#ifdef __cplusplus
}
#endif

#endif
