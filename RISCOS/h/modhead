/* Generated by CMunge 0.78 (17 Dec 2021)
 * CMunge Copyright (c) 1999-2006 Robin Watts/Justin Fletcher */

#ifndef _CMUNGE_Debugger_H_
#define _CMUNGE_Debugger_H_

#include "kernel.h"

#define CMUNGE_VERSION (78)
#define CMHG_VERSION   (531) /* Nearest equivalent version */

#define Module_Title		"Debugger"
#define Module_Help		"Debugger"
#define Module_VersionString	"0.03"
#define Module_VersionNumber	3
#ifndef Module_Date
#define Module_Date		"14 Jul 2024"
#endif

#ifdef __cplusplus
extern "C" {
#endif


/***************************************************************************
 * Function:     Mod_Init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *Mod_Init(const char *tail, int podule_base, void *pw);


/***************************************************************************
 * Function:     Mod_Final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *Mod_Final(int fatal, int podule_base, void *pw);


/***************************************************************************
 * Description:  Star command and help request handler routines.
 * Parameters:   arg_string = pointer to argument string (control
 *                            terminated), or output buffer
 *               argc       = number of arguments passed
 *               number     = command number (see CMD_* definitions below)
 *               pw         = private word for module
 * On exit:      If number indicates a help entry:
 *                 To output, assemble zero terminated output into
 *                 arg_string, and return help_PRINT_BUFFER to print it.
 *                 To stay silent, return NULL.
 *                 To given an error, return an error pointer.
 *                 [In this case, you need to cast the 'const' away]
 *               If number indicates a configure option:
 *                 If arg_string is arg_STATUS, then print status, otherwise
 *                 use argc and arg_string to set option.
 *                 Return NULL for no error.
 *                 Return one of the four error codes below (configure_*)
 *                 for a generic error message.
 *                 Return an error pointer for a custom error.
 *               If number indicates a command entry:
 *                 Execute the command given by number, and arg_string.
 *                 Return NULL on success,
 *                 Return a pointer to an error block on failure.
 **************************************************************************/
_kernel_oserror *Mod_Command(const char *arg_string, int argc, int number,
                             void *pw);
_kernel_oserror *Cmd_Memory(const char *arg_string, int argc, int number,
                            void *pw);
_kernel_oserror *Cmd_MemoryI(const char *arg_string, int argc, int number,
                             void *pw);
_kernel_oserror *Cmd_MemoryA(const char *arg_string, int argc, int number,
                             void *pw);
_kernel_oserror *Cmd_DumpI(const char *arg_string, int argc, int number,
                           void *pw);
_kernel_oserror *Cmd_InitStore(const char *arg_string, int argc, int number,
                               void *pw);
_kernel_oserror *Cmd_ShowRegs(const char *arg_string, int argc, int number,
                              void *pw);
#define help_PRINT_BUFFER		((_kernel_oserror *) arg_string)
#define arg_CONFIGURE_SYNTAX		((char *) 0)
#define arg_STATUS			((char *) 1)
#define configure_BAD_OPTION		((_kernel_oserror *) -1)
#define configure_NUMBER_NEEDED		((_kernel_oserror *) 1)
#define configure_TOO_LARGE		((_kernel_oserror *) 2)
#define configure_TOO_MANY_PARAMS	((_kernel_oserror *) 3)

/* Command numbers, as passed to the command handler functions (see above) */
#undef CMD_Memory
#define CMD_Memory (0)
#undef CMD_MemoryI
#define CMD_MemoryI (1)
#undef CMD_MemoryA
#define CMD_MemoryA (2)
#undef CMD_DumpI
#define CMD_DumpI (3)
#undef CMD_InitStore
#define CMD_InitStore (4)
#undef CMD_ShowRegs
#define CMD_ShowRegs (5)


/***************************************************************************
 * Description:  SWI handler routine. All SWIs for this module will be
 *               passed to these routines.
 * Parameters:   number = SWI number within SWI chunk (i.e. 0 to 63)
 *               r      = pointer to register block on entry
 *               pw     = private word for module
 * On exit:      Return NULL if SWI handled sucessfully, setting return
 *               register values (r0-r9) in r.
 *               Return error_BAD_SWI for out of range SWIs.
 *               Return an error block for a custom error.
 **************************************************************************/
/* Functions called to handle particular SWI calls */
_kernel_oserror *SWI_Disassemble(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_DisassembleThumb(int number, _kernel_swi_regs *r,
                                      void *pw);
/* SWI number definitions */
#define Debugger_00 (0x00040380)
#undef Debugger_Disassemble
#undef XDebugger_Disassemble
#define Debugger_Disassemble      (0x00040380)
#define XDebugger_Disassemble     (0x00060380)
#undef Debugger_DisassembleThumb
#undef XDebugger_DisassembleThumb
#define Debugger_DisassembleThumb  (0x00040381)
#define XDebugger_DisassembleThumb (0x00060381)

/* Special error for 'SWI values out of range for this module' */
#define error_BAD_SWI ((_kernel_oserror *) -1)

/* Error base for this module */
#define ERROR_BASE (0x00840000)
/* Error messages embedded in header, based at &840000 */
extern void __err_err_CannotParseStarMemory(void); /* &840000 */
extern void __err_err_CannotParseStarMemoryI(void); /* &840001 */
extern void __err_err_CannotParseStarDumpI(void); /* &840002 */
extern void __err_err_BadSyntaxInitStore(void); /* &840003 */
extern void __err_err_BadSyntaxMemoryA(void); /* &840004 */
extern void __err_err_MemoryANotInteractive(void); /* &840005 */
#define err_CannotParseStarMemory ((_kernel_oserror*)(int)__err_err_CannotParseStarMemory)
#define err_CannotParseStarMemoryI ((_kernel_oserror*)(int)__err_err_CannotParseStarMemoryI)
#define err_CannotParseStarDumpI ((_kernel_oserror*)(int)__err_err_CannotParseStarDumpI)
#define err_BadSyntaxInitStore ((_kernel_oserror*)(int)__err_err_BadSyntaxInitStore)
#define err_BadSyntaxMemoryA ((_kernel_oserror*)(int)__err_err_BadSyntaxMemoryA)
#define err_MemoryANotInteractive ((_kernel_oserror*)(int)__err_err_MemoryANotInteractive)

#ifdef __cplusplus
}
#endif

#endif
