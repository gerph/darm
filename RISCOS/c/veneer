/*******************************************************************
 * File:        veneer
 * Purpose:     Debugger module interface
 * Author:      Gerph
 ******************************************************************/

#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "modhead.h"

#include "rodis.h"
#include "cli-parser.h"
#include "memoryi.h"
#include "showregs.h"


/* Number of instructions to disassemble if not supplied */
#define MEMORYI_DEFAULT_SIZE (16)

/* Where application space starts */
#define APPLICATION_SPACE_BASE (0x8000)

/* Invalid instruction to use by default in *InitStore */
#define DEFAULT_INITSTORE_VALUE (0xE7FFFFFF)

/* Number of rows to dump in *Memory by default */
#define MEMORY_DEFAULT_SIZE (40)


/***************************************************************************
 * Function:     Mod_Init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *Mod_Init(const char *tail, int podule_base, void *pw)
{
    printf("Module Debugger initialised\n");
    return NULL;
}


/***************************************************************************
 * Function:     Mod_Final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *Mod_Final(int fatal, int podule_base, void *pw)
{
    printf("Module Debugger dying\n");
    return NULL;
}


/***************************************************************************
 * Description:  Star command and help request handler routines.
 * Parameters:   arg_string = pointer to argument string (control
 *                            terminated), or output buffer
 *               argc       = number of arguments passed
 *               number     = command number (see CMD_* definitions below)
 *               pw         = private word for module
 * On exit:      If number indicates a help entry:
 *                 To output, assemble zero terminated output into
 *                 arg_string, and return help_PRINT_BUFFER to print it.
 *                 To stay silent, return NULL.
 *                 To given an error, return an error pointer.
 *                 [In this case, you need to cast the 'const' away]
 *               If number indicates a configure option:
 *                 If arg_string is arg_STATUS, then print status, otherwise
 *                 use argc and arg_string to set option.
 *                 Return NULL for no error.
 *                 Return one of the four error codes below (configure_*)
 *                 for a generic error message.
 *                 Return an error pointer for a custom error.
 *               If number indicates a command entry:
 *                 Execute the command given by number, and arg_string.
 *                 Return NULL on success,
 *                 Return a pointer to an error block on failure.
 **************************************************************************/
_kernel_oserror *Mod_Command(const char *arg_string, int argc, int number,
                             void *pw)
{
    return NULL;
}



/* *Memory [B|W|H] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]] */
_kernel_oserror *Cmd_Memory(const char *arg_string, int argc, int number,
                            void *pw)
{
    parsed_arch_t parsed_arch;
    memory_params_t memory_params;
    int data_width = 4;
    int row_width = 16;
    int success;

    arg_string = parse_data_width(arg_string, &data_width, data_width);

    success = parse_memory_params(arg_string, &memory_params, MEMORY_DEFAULT_SIZE * row_width);
    if (!success)
    {
        printf("Failed\n"); /* FIXME: Put an error here */
        return NULL;
    }

    dump_memory(data_width,
                memory_params.base_addr,
                memory_params.end_addr);

    return NULL;
}




/* *MemoryI [T|A] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]] */
_kernel_oserror *Cmd_MemoryI(const char *arg_string, int argc, int number,
                             void *pw)
{
    disassemble_error_t err;
    parsed_arch_t parsed_arch;
    memory_params_t memory_params;
    int inst_width;
    int success;

    arg_string = parse_architecture(arg_string, &parsed_arch);

    inst_width = parsed_arch.inst_width_max;
    success = parse_memory_params(arg_string, &memory_params, MEMORYI_DEFAULT_SIZE * inst_width);
    if (!success)
    {
        printf("Failed\n"); /* FIXME: Put an error here */
        return NULL;
    }

    err = disassemble_memory((parsed_arch.arch == arch_thumb) ? 1 : 0,
                             memory_params.base_addr,
                             memory_params.end_addr);

    return NULL;
}


_kernel_oserror *Cmd_DumpI(const char *arg_string, int argc, int number,
                           void *pw)
{
    disassemble_error_t err;
    parsed_arch_t parsed_arch;
    memory_params_t memory_params;
    int inst_width;
    int success;
    const char *filename;

    /* Skip leading spaces */
    while (*arg_string == ' ')
        arg_string++;

    filename = arg_string;

    /* Find the end of the filename parameter */
    while (*arg_string > ' ')
        arg_string++;

    arg_string = parse_architecture(arg_string, &parsed_arch);

    inst_width = parsed_arch.inst_width_max;

    success = parse_memory_params(arg_string, &memory_params, 0x80000000);
    if (!success)
    {
        printf("Failed\n");
        return NULL;
    }

    err = disassemble_file(filename,
                           (parsed_arch.arch == arch_thumb) ? 1 : 0,
                           memory_params.base_addr,
                           memory_params.end_addr);
    if (err == diserror_file_not_found)
        printf("File not found");

    return NULL;
}



_kernel_oserror *Cmd_InitStore(const char *arg_string, int argc, int number,
                               void *pw)
{
    uint32_t *mem = (uint32_t*)APPLICATION_SPACE_BASE;
    uint32_t *limit;
    uint32_t value;
    if (argc == 0)
    {
        value = DEFAULT_INITSTORE_VALUE;
    }
    else
    {
        param_t param;
        arg_string = parse_value_or_reg(arg_string, &param);
        if (arg_string == NULL)
            return NULL; /* FIXME: Put and error here */
        value = param.value;
    }

    limit = (uint32_t *)read_memory_limit();
    for (; mem<limit; mem++)
        *mem = value;
    printf("Store initialised (up to &%08lx) with &%08lx\n", (uint32_t)limit, value);
    return NULL;
}



_kernel_oserror *Cmd_ShowRegs(const char *arg_string, int argc, int number,
                              void *pw)
{
    unsigned long *regdump = get_exception_area();
    excdumpregion_t *excdumpregion = get_exception_dump_region();
    last_abort_info_t last_abort_info;
    get_last_abort_info(&last_abort_info);

    cmd_showregs(regdump, &last_abort_info, excdumpregion);
    return NULL;
}


_kernel_oserror *SWI_Disassemble(int number, _kernel_swi_regs *r, void *pw)
{
    uint32_t word = (uint32_t)r->r[0];
    uint32_t addr = (uint32_t)r->r[1];
    const  char *str;

    str = disassemble_word(word, addr, 0);

    r->r[1] = (int)str;
    r->r[2] = strlen(str);
    return NULL;
}

_kernel_oserror *SWI_DisassembleThumb(int number, _kernel_swi_regs *r,
                                      void *pw)
{
    uint32_t word = (uint32_t)r->r[0];
    uint32_t addr = (uint32_t)r->r[1];
    const char *str;

    str = disassemble_word(word, addr, 1);

    r->r[1] = (int)str;
    r->r[2] = strlen(str);
    return NULL;
}
