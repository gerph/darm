/*******************************************************************
 * File:        rodis
 * Purpose:     RISCOS Disassembly veneers for other libraries
 * Author:      Gerph
 * Date:        16 Jun 2024
 ******************************************************************/

#include <string.h>
#include <stdio.h>
#include <ctype.h>

#include "swis.h"

#include "darm.h"

static darm_t d;
static darm_str_t str;


/*************************************************** Gerph *********
 Function:      lookup_swi
 Description:   Convert SWI number to a string
 Parameters:    swinum = the number to convert
 Returns:       pointer to static string, or NULL if not decodable
 ******************************************************************/
const char *lookup_swi(uint32_t swinum)
{
    static char buffer[128];
    _kernel_oserror *err;
    err = _swix(OS_SWINumberToString, _INR(0, 2), swinum, buffer, sizeof(buffer));
    if (err)
        return NULL;
    return buffer;
}


const char *disassemble_word(uint32_t word, uint32_t address, int thumb)
{
    int ok;
    static char buffer[128];

    ok = 0;
    if (thumb)
    {
        if (darm_thumb_disasm(&d, (uint16_t)word) == 0)
            ok = 1;
    }
    else
    {
        if (darm_armv7_disasm(&d, word) == 0)
            ok = 1;
    }

    if (ok &&
        darm_str2(&d, &str, 1) == 0) {

        char mnemonic[12];
        char newargs[80];
        const char *args = &str.total[strlen(str.mnemonic) + 1];
        strcpy(mnemonic, str.mnemonic);
        if (strncmp(mnemonic, "svc", 3) == 0)
        {
            const char *swiname;
            mnemonic[0] = 's';
            mnemonic[1] = 'w';
            mnemonic[2] = 'i';

            /* The SWI number is in the d.imm parameter */
            swiname = lookup_swi(d.imm);
            if (swiname != NULL)
                args = swiname;
        }
        else if ((strncmp(mnemonic, "ldm", 3) == 0 ||
                  strncmp(mnemonic, "stm", 3) == 0) &&
                 mnemonic[3] != 'i' &&
                 mnemonic[3] != 'd')
        {
            /* LDM, LDMNE, STM, STMNE, etc */
            strcat(mnemonic, "ia");
        }

        if (args[0] == '#' && args[1] == '+')
        {
            /* This is a PC relative instruction like B/BL/BLX (or conditional variant) */
            sprintf(newargs, "&%08lx", address + 8 + d.imm);
            args = newargs;
        }
        else if (strncmp(mnemonic, "adr", 3) == 0)
        {
            /* This is a ADR with PC relative reference */
            char *hashplus;
            strcpy(newargs, args);
            hashplus = strstr(newargs, "#+");
            if (hashplus)
            {
                sprintf(hashplus, "&%08lx", d.U ? address + 8 + d.imm : address + 8 - d.imm);
            }
            args = newargs;
        }
        else if ((strncmp(mnemonic, "ldr", 3) == 0 ||
                  strncmp(mnemonic, "str", 3) == 0) &&
                 strstr(args, "pc, #") != NULL)
        {
            /* This is a LDR/STR with PC relative reference */
            char *bracketpc;
            strcpy(newargs, args);
            bracketpc = strstr(newargs, "[pc");
            if (bracketpc)
            {
                sprintf(bracketpc, "&%08lx", d.U ? address + 8 + d.imm : address + 8 - d.imm);
            }
            args = newargs;
        }

        /* Tweak the hex notation */
        {
            char *zerox = strstr(args, "0x");
            if (zerox)
            {
                int offset = zerox - args;
                if (args != newargs)
                    strcpy(newargs, args), args = newargs;
                newargs[offset] = '&';
                strcpy(&newargs[offset + 1], &newargs[offset + 2]);
            }
        }

        /* Ensure mnemonics are in the correct case */
        {
            char *s;
            for (s = mnemonic; *s; s++)
            {
                *s = toupper(*s);
            }
        }

        sprintf(buffer, "%-8s%s", mnemonic, args);
    }
    else
    {
        sprintf(buffer, "Undefined instruction");
    }

    return buffer;
}



const char *debugger_disassemble(uint32_t word, uint32_t addr)
{
    return disassemble_word(word, addr, 0);
}
